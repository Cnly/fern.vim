*fern.txt*			General purpose asynchronous tree explorer

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license

=============================================================================
CONTENTS						*fern-contents*

INTRODUCTION				|fern-introduction|
USAGE					|fern-usage|
INTERFACE				|fern-interface|
  VARIABLE				|fern-variable|
  COMMAND				|fern-command|
  FUNCTION				|fern-function|


=============================================================================
INTRODUCTION						*fern-introduction*

*fern.vim* (fern) is a general purpose asynchronous tree explorer written in
pure Vim script.


=============================================================================
INTERFACE						*fern-interface*

-----------------------------------------------------------------------------
VARIABLE						*fern-variable*


							*g:fern_debug*
g:fern_debug
	Set 1 to enable fern debug mode.
	Default: 0

					*g:fern_disable_default_mappings*
g:fern_disable_default_mappings
	Set 1 to disable default mappings
	Default: 0

-----------------------------------------------------------------------------
COMMAND							*fern-command*

							*:Fern*
:Fern {url} [-reveal={reveal}] [-opener={opener}]
	Open a fern buffer in split windows style with the {opener}.

	If {reveal} is specified, parent nodes of the node which is identified
	by the {reveal} are expanded and the node will be focused.
	The {reveal} must be a relative path separated by "/" from the
	specfied {url}.
	Note that if the {url} is for "file" scheme, an absolute path can be
	specified to the {reveal}.
								*fern-opener*
	The following value are available for the {opener}:

	"select"	Open a prompt to select window to open a fern buffer
			(like t9md/vim-choosewin)
	"edit"		Open a fern buffer on the current buffer by |edit|
	"split"		Open a fern buffer on a side of the current buffer by
			|split|
	"vsplit"	Open a fern buffer on a vertical side of the current
			buffer by |vsplit|
	"tabedit"	Open a fern buffer on a new tabpage by |tabedit|

	Additionally, any modifiers (|mods|) are allowd to be prepend.

							*:Fern-drawer*
:Fern {url} -drawer [-reveal={path}] [-width={width}] [-keep] [-toggle]
	Open a fern buffer in project drawer style with the {width}.

	If the {width} is specified, the width of the window is regulated to
	the specified value.
	If "-keep" options is specified, the buffer won't close even there is
	only this window exist.
	If "-toggle" option is specified, existing fern buffer will be closed
	rather than opening a new fern buffer when exist.

	See |:Fern| for other arguments and options.

							*:FernFocus*
:FernFocus [-drawer]
	Focus a next fern viewer. If "-drawer" option is specified, it focus
	only a project drawer style fern.


-----------------------------------------------------------------------------
FUNCTION						*fern-function*

						*fern#smart#leaf()*
fern#smart#leaf({leaf}, {collapsed}[, {expanded}])
	Return one of a given mapping expression determined by a status of a
	node under the cursor. If the node is leaf, the {leaf} is returned.
	If the node is branch and collapsed, the {collapsed} is returned. If
	the node is branch and expanded, the {expanded} or {collapsed} is
	returned.
>
	" Perform 'open' on leaf node and 'enter' on branch node
	nmap <buffer><expr>
	      \ <Plug>(fern-open-or-enter)
	      \ fern#smart#leaf(
	      \   "\<Plug>(fern-action-open)",
	      \   "\<Plug>(fern-action-enter)",
	      \ )

	" Perform 'open' on leaf node, 'expand' on collapsed node, and
	" 'collapse' on expanded node.
	nmap <buffer><expr>
	      \ <Plug>(fern-open-or-expand-or-collapse)
	      \ fern#smart#leaf(
	      \   "\<Plug>(fern-action-open)",
	      \   "\<Plug>(fern-action-expand)",
	      \   "\<Plug>(fern-action-collapse)",
	      \ )
<
						*fern#smart#drawer()*
fern#smart#drawer({drawer}, {explorer})
	Return one of a given mapping expression determined by the style of
	a current buffer. If the current buffer is drawer, the {drawer} is
	returned. Otherwise the {explorer} is retunred.
>
	" Perform 'expand' on drawer and 'enter' on explorer
	nmap <buffer><expr>
	      \ <Plug>(fern-expand-or-enter)
	      \ fern#smart#drawer(
	      \   "\<Plug>(fern-action-expand)",
	      \   "\<Plug>(fern-action-enter)",
	      \ )
<
						*fern#smart#scheme()*
fern#smart#scheme({default}, {schemes})
	Return one of a given mapping expression determined by the scheme of
	a current buffer. The {schemes} is a |Dict| which key is a name of
	scheme and the value is mapping expression. If no corresponding
	key-value found in {schemes}, the value of {default} is returned.
>
	" Execute 'Fern bookmark:///' or back to a previous file if the
	" scheme is already 'bookmark'
	nmap <buffer><expr><silent>
	      \ <C-^>
	      \ fern#smart#scheme(
	      \   ":\<C-u>Fern bookmark:///\<CR>",
	      \   {
	      \     'bookmark': "\<C-^>",
	      \   },
	      \ )
<

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
