Describe fern#fri
  Describe #new()
    It returns FRI from a full FRI
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'user:pass@example.com',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      let full = copy(want)
      Assert Equals(fern#fri#new(full), want)
    End

    It returns FRI from a partial FRI
      Assert Equals(fern#fri#new({ 'scheme': 'hello' }), {
            \ 'scheme': 'hello',
            \ 'authority': '',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'authority': 'hello' }), {
            \ 'scheme': '',
            \ 'authority': 'hello',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'path': 'hello' }), {
            \ 'scheme': '',
            \ 'authority': '',
            \ 'path': 'hello',
            \ 'query': {},
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'query': { 'hello': 'world' } }), {
            \ 'scheme': '',
            \ 'authority': '',
            \ 'path': '',
            \ 'query': {
            \   'hello': 'world',
            \ },
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'fragment': 'hello' }), {
            \ 'scheme': '',
            \ 'authority': '',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': 'hello',
            \})
    End
  End

  Describe #parse()
    It returns FRI for 'file:///foo/bar'
      let expr = 'file:///foo/bar'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo/bar;drawer'
      let expr = 'file:///foo/bar;drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo/bar;width=50&drawer'
      let expr = 'file:///foo/bar;width=50&drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo/bar;width=50&drawer#fragment'
      let expr = 'file:///foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'ssh://user:pass@example.com/foo/bar;width=50&drawer#fragment'
      let expr = 'ssh://user:pass@example.com/foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'user:pass@example.com',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End
  End

  Describe #format()
    It formats FRI to 'file:///foo/bar'
      let expr = 'file:///foo/bar'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo/bar;drawer'
      let expr = 'file:///foo/bar;drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo/bar;width=50&drawer'
      let expr = 'file:///foo/bar;width=50&drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo/bar;width=50&drawer#fragment'
      let expr = 'file:///foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'ssh://user:pass@example.com/foo/bar;drawer&width=50#fragment'
      let expr = 'ssh://user:pass@example.com/foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'user:pass@example.com',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End
  End

  Describe #encode()
    It encodes "#"
      Assert Equals(fern#fri#encode('#'), '%23')
    End

    It encodes "["
      Assert Equals(fern#fri#encode('['), '%5B')
    End

    It encodes "]"
      Assert Equals(fern#fri#encode(']'), '%5D')
    End

    It encodes "="
      Assert Equals(fern#fri#encode('='), '%3D')
    End

    It encodes " "
      Assert Equals(fern#fri#encode(' '), '%20')
    End
  End

  Describe #decode()
    It decodes "%23"
      Assert Equals(fern#fri#decode("%23"), "#")
    End

    It decodes "%5B"
      Assert Equals(fern#fri#decode("%5B"), "[")
    End

    It decodes "%5D"
      Assert Equals(fern#fri#decode("%5D"), "]")
    End

    It decodes "%3D"
      Assert Equals(fern#fri#decode("%3D"), "=")
    End

    It decodes "%20"
      Assert Equals(fern#fri#decode("%20"), " ")
    End
  End
End
